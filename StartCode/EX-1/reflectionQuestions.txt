1. Why is separating concerns (routes, controllers, models, middleware) important in backend 
development? 
=> Separating concerns makes our project cleaner, faster to debug, easier to scale, and more collaborative.

2. What challenges did you face when refactoring the monolithic server.js into multiple files? 
=>  Comfusing

3. How does moving business logic into controllers improve the readability and testability of 
your code? 
=>  - Easy to fix bugs 
    - Easy to read and understand code

4. If this project were to grow to support authentication, database integration, and logging, how 
would this folder structure help manage that growth?
=>
├── controllers/
│   ├── userController.js
│   └── authController.js
├── routes/
│   ├── userRoute.js
│   └── authRoute.js
├── middleware/
│   ├── logger.js
│   ├── authMiddleware.js
│   └── errorHandler.js
├── models/
│   └── User.js         ← Database schema
├── services/
│   └── userService.js  ← Business logic
├── config/
│   └── db.js           ← DB connection
├── utils/
│   └── logger.js       ← More advanced logging
├── .env
├── app.js
└── package.json
